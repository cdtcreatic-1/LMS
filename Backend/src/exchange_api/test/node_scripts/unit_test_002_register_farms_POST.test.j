// Generated by CodiumAI




/*
Code Analysis

Objective:
The objective of this function is to create a new farm for a given user, with the provided farm name, number of lots, and village ID. The function performs validation checks on the input data, checks if the user exists, and if a farm already exists for the user. If all checks pass, the function creates a new farm and returns a success message with the saved farm data.

Inputs:
- req: the request object containing the input data
- res: the response object to send the output data

Flow:
1. Initialize variables for farmSaved and successStatus
2. Extract input data from the request object
3. Perform validation checks on the input data and return validation errors if any
4. Check if the user exists and return an error if not
5. Check if a farm already exists for the user and return an error if so
6. Create a new farm with the input data and save it to the database
7. Return a success message with the saved farm data

Outputs:
- Success message with the saved farm data

Additional aspects:
- The function uses external modules for farm and user data access and error handling
- The function uses async/await syntax for handling asynchronous operations
- The function returns early if any validation or error checks fail
*/

const dataS = require('../../route/register_farm/post');
const userDal = require('cccommon/dal/user');
const farmDal = require('cccommon/dal/farms');



const registerUser = require("./unit_test_001_register.test")

describe('handler_function', () => {
    let response;  
    // Before each test, the database is cleared
    beforeEach(async () => {
        await farmDal.deleteAllFarms();
        console.log("01 Farms deleted");
        await userDal.deleteAllUsers();
        console.log("02 Users deleted");
        response = await registerUser.createTestUser();

        console.log(response);


    });

    // Tests that the function returns a success message and the farmSaved object when all required fields are present and valid. 
    it("test_create_farm_success", async () => {
        const req = {
            body: {
                id_user: response.id_user,
                farm_name: "Test Farm",
                farm_number_lots: 5,
                id_village: 1973,
                farm_longitude: 0.0,
                farm_latitude: 0.0
            }
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            send: jest.fn()
        };
        await dataS.handler(req, res);
        expect(res.status).toHaveBeenCalledWith(201);
        expect(res.send).toHaveBeenCalledWith({
            message: 'User created successfully',
            farmSaved: expect.any(Object)
        });
    });
});

